
from sympy import *
from sympy.utilities.iterables import flatten
from sympy import ccode

import re

def repl1(m):                                                                  
    return 'M' + m.group(1) + m.group(2) + '(' + m.group(3) + ',' + m.group(4) + ')'
    
def repl2(m):                                                                  
    return '( p' + m.group(1) + ' * p' + m.group(1) + ' )'
    
def repl3(m):                                                                  
    return 'p(' + m.group(1) + ')'

def filter_j(s):
	sf = re.sub(r'M([a-z])([a-z])_([0-9])([0-9])', repl1, s)
	sf = re.sub(r'p([0,1,2])\*\*2', repl2, sf)
	sf = re.sub(r'p([0,1,2])', repl3, sf)
	return sf

def se3(m):
	m[3,0] = 0
	m[3,1] = 0
	m[3,2] = 0
	m[3,3] = 1
	return m

dM = MatrixSymbol('dM', 4,4)

i0, i1, i2  = symbols('i0, i1, i2')
p0, p1, p2  = symbols('p0, p1, p2')
K = Matrix([[i0, 0, i1, 0],[0, i0, i2, 0],[0, 0, 1, 0], [0, 0, 0, 1]])
p = Matrix([p0, p1, p2, 1])
pp = K*dM*p

Jwj = Matrix([pp[0]/pp[2], pp[1]/pp[2]]).jacobian(flatten(Matrix(dM))).subs(
{
"dM_00":1, "dM_01":0, "dM_02":0, "dM_03":0,
"dM_10":0, "dM_11":1, "dM_12":0, "dM_13":0,
"dM_20":0, "dM_21":0, "dM_22":1, "dM_23":0,
"dM_30":0, "dM_31":0, "dM_32":0, "dM_33":1})
Jwj.simplify()
			
G0 = Matrix([[0, 0, 0, 1],
			[0, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 0]])

G1 = Matrix([[0, 0, 0, 0],
			[0, 0, 0, 1],
			[0, 0, 0, 0],
			[0, 0, 0, 0]])
			
G2 = Matrix([[0, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 1],
			[0, 0, 0, 0]])
			
G3 = Matrix([[0, 0, 0, 0],
			[0, 0, -1, 0],
			[0, 1, 0, 0],
			[0, 0, 0, 0]])
			
G4 = Matrix([[0, 0, 1, 0],
			[0, 0, 0, 0],
			[-1, 0, 0, 0],
			[0, 0, 0, 0]])
			
G5 = Matrix([[0, -1, 0, 0],
			[1, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 0]])
			

Je = Matrix([flatten(G0), flatten(G1), flatten(G2), flatten(G3), flatten(G4), flatten(G5)]).T

Jj = Jwj*Je/i0
Jj.simplify()


f = open('reduce_jacobian_generated.cpp', 'w');

f.write('// File generated by symbolic_jacobian.py\n\n')

f.write('#include <reduce_jacobian.h>\n\n')
f.write('void reduce_jacobian::compute_jacobian(const Eigen::Vector4f & p, Eigen::Matrix<float, 2, 6> & J) {\n')

for i in range(2):
	for j in range(6):
		f.write('\tJ('+str(i)+','+str(j)+') = ' + filter_j(str(Jj[i,j])) + ';\n')

f.write('}\n')
f.close()




